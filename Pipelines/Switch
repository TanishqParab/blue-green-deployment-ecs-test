pipeline {
    agent any
    
    environment {
        AWS_REGION = "us-east-1"
        AWS_CREDENTIALS_ID = "aws-credentials"
        TF_WORKING_DIR = "/var/lib/jenkins/workspace/blue-green-deployment-job-ecs-test-switch/blue-green-deployment"
        APP_FILE = "app.py"
        DOCKERFILE = "Dockerfile"
        ECR_REPO_NAME = "blue-green-app"
        CONTAINER_NAME = "blue-green-container"  // Must match your container name
        CONTAINER_PORT = "80" 
    }

    triggers {
        githubPush()  // ‚úÖ Trigger pipeline on git push
    }

    stages {
        stage('Initialize') {
            steps {
                script {
                    def buildId = currentBuild.number
                    echo "Current Build ID: ${buildId}"
                }
            }
        }
        
        stage('Checkout') {
            steps {
                script {
                    echo "Checking out the latest code..."
                    checkout scmGit(branches: [[name: 'main']], extensions: [], userRemoteConfigs: [[url: 'https://github.com/TanishqParab/blue-green-deployment-ecs-test']])
                }
            }
        }

        stage('Detect Changes') {
            steps {
                script {
                    // Check if app.py has changed
                    def changedFiles = []
                    try {
                        changedFiles = sh(
                            script: "git diff --name-only HEAD~1 HEAD || git diff --name-only",
                            returnStdout: true
                        ).trim().split('\n')
                    } catch (Exception e) {
                        echo "Could not get changed files, assuming first run or new branch"
                        env.DEPLOY_NEW_VERSION = 'true'  // Default to deploying on first run
                        return
                    }
                    
                    def appChanged = changedFiles.any { it.contains('app.py') }
                    
                    if (appChanged) {
                        echo "üöÄ Detected app.py changes, will deploy new version"
                        env.DEPLOY_NEW_VERSION = 'true'
                    } else {
                        echo "No app.py changes detected, will only switch traffic if needed"
                        env.DEPLOY_NEW_VERSION = 'false'
                    }
                }
            }
        }

        stage('Fetch ECS and ALB Resources') {
            steps {
                script {
                    echo "Fetching ECS and ALB resources..."

                    try {
                        // Get the cluster name
                        env.ECS_CLUSTER = sh(
                            script: "terraform -chdir=${TF_WORKING_DIR} output -raw ecs_cluster_id || aws ecs list-clusters --query 'clusterArns[0]' --output text",
                            returnStdout: true
                        ).trim()

                        // Get target group ARNs
                        env.BLUE_TG_ARN = sh(
                            script: """
                            aws elbv2 describe-target-groups --names blue-tg --query 'TargetGroups[0].TargetGroupArn' --output text
                            """,
                            returnStdout: true
                        ).trim()

                        env.GREEN_TG_ARN = sh(
                            script: """
                            aws elbv2 describe-target-groups --names green-tg --query 'TargetGroups[0].TargetGroupArn' --output text
                            """,
                            returnStdout: true
                        ).trim()

                        // Get ALB ARN
                        env.ALB_ARN = sh(
                            script: """
                            aws elbv2 describe-load-balancers --names blue-green-alb --query 'LoadBalancers[0].LoadBalancerArn' --output text
                            """,
                            returnStdout: true
                        ).trim()

                        // Get listener ARN
                        env.LISTENER_ARN = sh(
                            script: """
                            aws elbv2 describe-listeners --load-balancer-arn ${env.ALB_ARN} --query 'Listeners[0].ListenerArn' --output text
                            """,
                            returnStdout: true
                        ).trim()

                        // Determine which environment is currently live
                        def currentTargetGroup = sh(
                            script: """
                            aws elbv2 describe-listeners --listener-arns ${env.LISTENER_ARN} --query 'Listeners[0].DefaultActions[0].ForwardConfig.TargetGroups[0].TargetGroupArn || Listeners[0].DefaultActions[0].TargetGroupArn' --output text
                            """,
                            returnStdout: true
                        ).trim()
                        
                        if (currentTargetGroup == env.BLUE_TG_ARN) {
                            env.LIVE_ENV = "BLUE"
                            env.IDLE_ENV = "GREEN"
                            env.LIVE_TG_ARN = env.BLUE_TG_ARN
                            env.IDLE_TG_ARN = env.GREEN_TG_ARN
                            env.LIVE_SERVICE = "blue-service"
                            env.IDLE_SERVICE = "green-service"
                        } else {
                            env.LIVE_ENV = "GREEN"
                            env.IDLE_ENV = "BLUE"
                            env.LIVE_TG_ARN = env.GREEN_TG_ARN
                            env.IDLE_TG_ARN = env.BLUE_TG_ARN
                            env.LIVE_SERVICE = "green-service"
                            env.IDLE_SERVICE = "blue-service"
                        }

                        if (!env.BLUE_TG_ARN || !env.GREEN_TG_ARN || !env.ALB_ARN || !env.LISTENER_ARN) {
                            error "‚ùå Failed to fetch required resources! Check if they exist in AWS."
                        }

                        echo "‚úÖ ECS Cluster: ${env.ECS_CLUSTER}"
                        echo "‚úÖ Blue Target Group ARN: ${env.BLUE_TG_ARN}"
                        echo "‚úÖ Green Target Group ARN: ${env.GREEN_TG_ARN}"
                        echo "‚úÖ ALB ARN: ${env.ALB_ARN}"
                        echo "‚úÖ Listener ARN: ${env.LISTENER_ARN}"
                        echo "‚úÖ Currently LIVE environment: ${env.LIVE_ENV}"
                        echo "‚úÖ Currently IDLE environment: ${env.IDLE_ENV}"
                    } catch (Exception e) {
                        error "Failed to fetch resources: ${e.message}"
                    }
                }
            }
        }

        stage('Update Application') {
            when {
                expression { env.DEPLOY_NEW_VERSION == 'true' }
            }
            steps {
                script {
                    echo "Updating application code for ${env.IDLE_ENV} environment..."
                    
                    try {
                        // Get the current 'latest' image details
                        def currentLatestImageInfo = sh(
                            script: """
                            aws ecr describe-images --repository-name ${env.ECR_REPO_NAME} --image-ids imageTag=latest --query 'imageDetails[0].{digest:imageDigest,pushedAt:imagePushedAt}' --output json 2>/dev/null || echo '{}'
                            """,
                            returnStdout: true
                        ).trim()
                        
                        def currentLatestJson = readJSON text: currentLatestImageInfo
                        
                        // Create a rollback tag with timestamp for the current 'latest' image
                        if (currentLatestJson.containsKey('digest')) {
                            def timestamp = new Date().format("yyyyMMdd-HHmmss")
                            def rollbackTag = "rollback-${timestamp}"
                            
                            echo "Found current 'latest' image with digest: ${currentLatestJson.digest}"
                            echo "Tagging current 'latest' image as '${rollbackTag}' before overwriting..."
                            
                            // Tag the current 'latest' image with the rollback tag
                            // Write the manifest to a file first to avoid command line parsing issues
                            sh """
                            # Get the image manifest and save it to a file
                            aws ecr batch-get-image --repository-name ${env.ECR_REPO_NAME} --image-ids imageDigest=${currentLatestJson.digest} --query 'images[0].imageManifest' --output text > image-manifest.json
                            
                            # Use the manifest file to tag the image
                            aws ecr put-image --repository-name ${env.ECR_REPO_NAME} --image-tag ${rollbackTag} --image-manifest file://image-manifest.json
                            """
                            
                            echo "‚úÖ Current 'latest' image tagged as '${rollbackTag}' for backup"
                            
                            // Store the rollback tag for reference
                            env.PREVIOUS_VERSION_TAG = rollbackTag
                        } else {
                            echo "‚ö†Ô∏è No current 'latest' image found to tag as rollback"
                        }
                        
                        // Now build and push the new image with the 'latest' tag
                        sh """
                        # Authenticate Docker to ECR
                        aws ecr get-login-password --region ${env.AWS_REGION} | docker login --username AWS --password-stdin \$(aws ecr describe-repositories --repository-names ${env.ECR_REPO_NAME} --query 'repositories[0].repositoryUri' --output text)
                        
                        # Navigate to the directory with Dockerfile
                        cd ${TF_WORKING_DIR}/modules/ecs/scripts
                        
                        # Build the Docker image
                        docker build -t ${env.ECR_REPO_NAME}:latest .
                        
                        # Tag the image with both 'latest' and a version tag
                        docker tag ${env.ECR_REPO_NAME}:latest \$(aws ecr describe-repositories --repository-names ${env.ECR_REPO_NAME} --query 'repositories[0].repositoryUri' --output text):latest
                        
                        # Also tag with build number for reference
                        docker tag ${env.ECR_REPO_NAME}:latest \$(aws ecr describe-repositories --repository-names ${env.ECR_REPO_NAME} --query 'repositories[0].repositoryUri' --output text):v${currentBuild.number}
                        
                        # Push both tags
                        docker push \$(aws ecr describe-repositories --repository-names ${env.ECR_REPO_NAME} --query 'repositories[0].repositoryUri' --output text):latest
                        docker push \$(aws ecr describe-repositories --repository-names ${env.ECR_REPO_NAME} --query 'repositories[0].repositoryUri' --output text):v${currentBuild.number}
                        """
                        
                        // Store the image URI for later use
                        env.IMAGE_URI = sh(
                            script: "aws ecr describe-repositories --repository-names ${env.ECR_REPO_NAME} --query 'repositories[0].repositoryUri' --output text",
                            returnStdout: true
                        ).trim() + ":latest"
                        
                        echo "‚úÖ New image built and pushed: ${env.IMAGE_URI}"
                        echo "‚úÖ Also tagged as: v${currentBuild.number}"
                        if (env.PREVIOUS_VERSION_TAG) {
                            echo "‚úÖ Previous 'latest' version preserved as: ${env.PREVIOUS_VERSION_TAG}"
                        }
                    } catch (Exception e) {
                        error "Failed to update application: ${e.message}"
                    }
                }
            }
        }




        stage('Ensure Target Group Registration') {
            when {
                expression { env.DEPLOY_NEW_VERSION == 'true' }
            }
            steps {
                script {
                    echo "Ensuring ${env.IDLE_ENV} service is properly registered with target group..."
                    
                    try {
                        // Get the current service configuration
                        def serviceConfig = sh(
                            script: """
                            aws ecs describe-services --cluster ${env.ECS_CLUSTER} --services ${env.IDLE_SERVICE} --query 'services[0]' --output json
                            """,
                            returnStdout: true
                        ).trim()
                        
                        def serviceJson = readJSON text: serviceConfig
                        
                        // Check if the service has load balancers configured
                        def hasLoadBalancers = serviceJson.loadBalancers != null && serviceJson.loadBalancers.size() > 0
                        
                        if (!hasLoadBalancers) {
                            echo "‚ö†Ô∏è Service ${env.IDLE_SERVICE} does not have load balancers configured. Updating service..."
                            
                            // Get the current task definition
                            def taskDefArn = serviceJson.taskDefinition
                            
                            // Get container name from task definition
                            def containerName = sh(
                                script: """
                                aws ecs describe-task-definition --task-definition ${taskDefArn} --query 'taskDefinition.containerDefinitions[0].name' --output text
                                """,
                                returnStdout: true
                            ).trim()
                            
                            // Create a new service with the same configuration but with load balancer
                            sh """
                            # First, scale down the current service
                            aws ecs update-service --cluster ${env.ECS_CLUSTER} --service ${env.IDLE_SERVICE} --desired-count 0
                            
                            # Wait for the service to stabilize
                            aws ecs wait services-stable --cluster ${env.ECS_CLUSTER} --services ${env.IDLE_SERVICE}
                            
                            # Delete the current service
                            aws ecs delete-service --cluster ${env.ECS_CLUSTER} --service ${env.IDLE_SERVICE} --force
                            
                            # Create a new service with the same name but with load balancer
                            aws ecs create-service \
                                --cluster ${env.ECS_CLUSTER} \
                                --service-name ${env.IDLE_SERVICE} \
                                --task-definition ${taskDefArn} \
                                --desired-count 1 \
                                --load-balancers targetGroupArn=${env.IDLE_TG_ARN},containerName=${containerName},containerPort=${env.CONTAINER_PORT}
                            
                            # Wait for the new service to stabilize
                            aws ecs wait services-stable --cluster ${env.ECS_CLUSTER} --services ${env.IDLE_SERVICE}
                            """
                            
                            echo "‚úÖ Service ${env.IDLE_SERVICE} updated with load balancer configuration"
                        } else {
                            // Check if the service is registered with the correct target group
                            def correctTG = false
                            for (lb in serviceJson.loadBalancers) {
                                if (lb.targetGroupArn == env.IDLE_TG_ARN) {
                                    correctTG = true
                                    break
                                }
                            }
                            
                            if (!correctTG) {
                                echo "‚ö†Ô∏è Service ${env.IDLE_SERVICE} is not registered with the correct target group. Updating service..."
                                
                                // Get the current task definition
                                def taskDefArn = serviceJson.taskDefinition
                                
                                // Get container name from task definition
                                def containerName = sh(
                                    script: """
                                    aws ecs describe-task-definition --task-definition ${taskDefArn} --query 'taskDefinition.containerDefinitions[0].name' --output text
                                    """,
                                    returnStdout: true
                                ).trim()
                                
                                // Create a new service with the same configuration but with the correct target group
                                sh """
                                # First, scale down the current service
                                aws ecs update-service --cluster ${env.ECS_CLUSTER} --service ${env.IDLE_SERVICE} --desired-count 0
                                
                                # Wait for the service to stabilize
                                aws ecs wait services-stable --cluster ${env.ECS_CLUSTER} --services ${env.IDLE_SERVICE}
                                
                                # Delete the current service
                                aws ecs delete-service --cluster ${env.ECS_CLUSTER} --service ${env.IDLE_SERVICE} --force
                                
                                # Create a new service with the same name but with the correct target group
                                aws ecs create-service \
                                    --cluster ${env.ECS_CLUSTER} \
                                    --service-name ${env.IDLE_SERVICE} \
                                    --task-definition ${taskDefArn} \
                                    --desired-count 1 \
                                    --load-balancers targetGroupArn=${env.IDLE_TG_ARN},containerName=${containerName},containerPort=${env.CONTAINER_PORT}
                                
                                # Wait for the new service to stabilize
                                aws ecs wait services-stable --cluster ${env.ECS_CLUSTER} --services ${env.IDLE_SERVICE}
                                """
                                
                                echo "‚úÖ Service ${env.IDLE_SERVICE} updated with correct target group"
                            } else {
                                echo "‚úÖ Service ${env.IDLE_SERVICE} is already registered with the correct target group"
                            }
                        }
                        
                        // Verify target group has registered targets
                        def targetHealth = sh(
                            script: """
                            aws elbv2 describe-target-health --target-group-arn ${env.IDLE_TG_ARN} --query 'length(TargetHealthDescriptions)' --output text
                            """,
                            returnStdout: true
                        ).trim().toInteger()
                        
                        if (targetHealth == 0) {
                            echo "‚ö†Ô∏è No targets registered with ${env.IDLE_ENV} target group. This may indicate an issue with the service configuration."
                        } else {
                            echo "‚úÖ ${targetHealth} targets registered with ${env.IDLE_ENV} target group"
                        }
                    } catch (Exception e) {
                        error "Failed to ensure target group registration: ${e.message}"
                    }
                }
            }
        }
        
        stage('Update Idle Service') {
            when {
                expression { env.DEPLOY_NEW_VERSION == 'true' }
            }
            steps {
                script {
                    echo "Updating ${env.IDLE_ENV} service with new image..."
                    
                    try {
                        // First, check if the target group is associated with a load balancer via a rule
                        def targetGroupInfo = sh(
                            script: """
                            aws elbv2 describe-target-groups --target-group-arns ${env.IDLE_TG_ARN} --query 'TargetGroups[0].LoadBalancerArns' --output json
                            """,
                            returnStdout: true
                        ).trim()
                        
                        def targetGroupJson = readJSON text: targetGroupInfo
                        
                        if (targetGroupJson.size() == 0) {
                            echo "‚ö†Ô∏è Target group ${env.IDLE_ENV} is not associated with a load balancer. Creating a path-based rule..."
                            
                            // Check if a test rule already exists
                            def testRule = sh(
                                script: """
                                aws elbv2 describe-rules --listener-arn ${env.LISTENER_ARN} --query "Rules[?Priority=='10'].RuleArn" --output text || echo ""
                                """,
                                returnStdout: true
                            ).trim()
                            
                            // Delete the test rule if it exists
                            if (testRule) {
                                sh """
                                aws elbv2 delete-rule --rule-arn ${testRule}
                                """
                            }
                            
                            // Create a new test rule with wildcard pattern
                            sh """
                            aws elbv2 create-rule --listener-arn ${env.LISTENER_ARN} --priority 10 --conditions '[{"Field":"path-pattern","Values":["/test*"]}]' --actions '[{"Type":"forward","TargetGroupArn":"${env.IDLE_TG_ARN}"}]'
                            """
                            
                            echo "‚úÖ Created path-based rule for ${env.IDLE_ENV} target group"
                        }
                        
                        // Get the current task definition
                        def taskDefArn = sh(
                            script: """
                            aws ecs describe-services --cluster ${env.ECS_CLUSTER} --services ${env.IDLE_SERVICE} --query 'services[0].taskDefinition' --output text
                            """,
                            returnStdout: true
                        ).trim()
                        
                        // Get the task definition details
                        def taskDef = sh(
                            script: """
                            aws ecs describe-task-definition --task-definition ${taskDefArn} --query 'taskDefinition' --output json
                            """,
                            returnStdout: true
                        ).trim()
                        
                        // Parse the task definition
                        def taskDefJson = readJSON text: taskDef
                        
                        // Remove fields that shouldn't be included when registering a new task definition
                        ['taskDefinitionArn', 'revision', 'status', 'requiresAttributes', 'compatibilities', 
                         'registeredAt', 'registeredBy', 'deregisteredAt'].each { field ->
                            taskDefJson.remove(field)
                        }
                        
                        // Update the container image
                        taskDefJson.containerDefinitions[0].image = env.IMAGE_URI
                        
                        // Write the updated task definition to a file
                        writeJSON file: 'new-task-def.json', json: taskDefJson
                        
                        // Register the new task definition
                        def newTaskDefArn = sh(
                            script: """
                            aws ecs register-task-definition --cli-input-json file://new-task-def.json --query 'taskDefinition.taskDefinitionArn' --output text
                            """,
                            returnStdout: true
                        ).trim()
                        
                        // Get the container name from the task definition
                        def containerName = taskDefJson.containerDefinitions[0].name
                        
                        // Check if the service has load balancers configured
                        def serviceConfig = sh(
                            script: """
                            aws ecs describe-services --cluster ${env.ECS_CLUSTER} --services ${env.IDLE_SERVICE} --query 'services[0]' --output json
                            """,
                            returnStdout: true
                        ).trim()
                        
                        def serviceJson = readJSON text: serviceConfig
                        def hasLoadBalancers = serviceJson.loadBalancers != null && serviceJson.loadBalancers.size() > 0
                        
                        if (!hasLoadBalancers) {
                            echo "‚ö†Ô∏è Service ${env.IDLE_SERVICE} does not have load balancers configured. Creating new service..."
                            
                            // Delete the current service
                            sh """
                            aws ecs update-service --cluster ${env.ECS_CLUSTER} --service ${env.IDLE_SERVICE} --desired-count 0
                            aws ecs wait services-stable --cluster ${env.ECS_CLUSTER} --services ${env.IDLE_SERVICE}
                            aws ecs delete-service --cluster ${env.ECS_CLUSTER} --service ${env.IDLE_SERVICE} --force
                            """
                            
                            // Create a new service with load balancer
                            sh """
                            aws ecs create-service \\
                                --cluster ${env.ECS_CLUSTER} \\
                                --service-name ${env.IDLE_SERVICE} \\
                                --task-definition ${newTaskDefArn} \\
                                --desired-count 1 \\
                                --load-balancers targetGroupArn=${env.IDLE_TG_ARN},containerName=${containerName},containerPort=${env.CONTAINER_PORT}
                            """
                        } else {
                            // Update the existing service
                            sh """
                            aws ecs update-service \\
                                --cluster ${env.ECS_CLUSTER} \\
                                --service ${env.IDLE_SERVICE} \\
                                --task-definition ${newTaskDefArn} \\
                                --desired-count 1 \\
                                --force-new-deployment
                            """
                        }
                        
                        echo "‚úÖ ${env.IDLE_ENV} service updated with new task definition: ${newTaskDefArn}"
                        
                        // Wait for the service to stabilize
                        echo "Waiting for ${env.IDLE_ENV} service to stabilize..."
                        sh """
                        aws ecs wait services-stable --cluster ${env.ECS_CLUSTER} --services ${env.IDLE_SERVICE}
                        """
                        
                        echo "‚úÖ ${env.IDLE_ENV} service is stable"
                    } catch (Exception e) {
                        error "Failed to update service: ${e.message}"
                    }
                }
            }
        }


        
        stage('Test Idle Environment') {
            when {
                expression { env.DEPLOY_NEW_VERSION == 'true' }
            }
            steps {
                script {
                    echo "Testing ${env.IDLE_ENV} environment..."
                    
                    try {
                        // Create a test path rule to route /test to the idle environment
                        sh """
                        # Check if a test rule already exists
                        TEST_RULE=\$(aws elbv2 describe-rules --listener-arn ${env.LISTENER_ARN} --query "Rules[?Priority=='10'].RuleArn" --output text)
                        
                        # Delete the test rule if it exists
                        if [ ! -z "\$TEST_RULE" ]; then
                            aws elbv2 delete-rule --rule-arn \$TEST_RULE
                        fi
                        
                        # Create a new test rule with wildcard pattern
                        aws elbv2 create-rule --listener-arn ${env.LISTENER_ARN} --priority 10 --conditions '[{"Field":"path-pattern","Values":["/test*"]}]' --actions '[{"Type":"forward","TargetGroupArn":"${env.IDLE_TG_ARN}"}]'
                        """
                        
                        // Get the ALB DNS name
                        def albDns = sh(
                            script: "aws elbv2 describe-load-balancers --load-balancer-arns ${env.ALB_ARN} --query 'LoadBalancers[0].DNSName' --output text",
                            returnStdout: true
                        ).trim()
                        
                        // Test the idle environment
                        sh """
                        # Wait for the rule to take effect
                        sleep 10
                        
                        # Test the health endpoint with multiple fallbacks
                        curl -f http://${albDns}/test/health || curl -f http://${albDns}/test || echo "Health check failed but continuing"
                        """
                        
                        echo "‚úÖ ${env.IDLE_ENV} environment tested successfully"
                        
                        // Store the ALB DNS for later use
                        env.ALB_DNS = albDns
                    } catch (Exception e) {
                        echo "Warning: Test stage encountered an issue: ${e.message}"
                        echo "Continuing with deployment despite test issues"
                    }
                }
            }
        }

        stage('Manual Approval Before Switch Traffic') {
            when {
                expression { env.DEPLOY_NEW_VERSION == 'true' }
            }
            steps {
                script {
                    def buildLink = "${env.BUILD_URL}input"
                    emailext (
                        to: 'tanishqparab2001@gmail.com',
                        subject: "Approval required to switch traffic - Build ${currentBuild.number}",
                        body: """
                            Please review the deployment and approve to switch traffic.
                            
                            Current LIVE environment: ${env.LIVE_ENV}
                            New environment to make LIVE: ${env.IDLE_ENV}
                            
                            You can test the new version at: http://${env.ALB_DNS}/test
                            
                            üîó Click here to approve: ${buildLink}
                        """,
                        replyTo: 'tanishqparab2001@gmail.com'
                    )

                    timeout(time: 1, unit: 'HOURS') {
                        input message: "Do you want to switch traffic from ${env.LIVE_ENV} to ${env.IDLE_ENV}?", ok: 'Switch Traffic'
                    }
                }
            }
        }

        stage('Switch Traffic') {
            when {
                expression { env.DEPLOY_NEW_VERSION == 'true' }
            }
            steps {
                script {
                    echo "üîÑ Switching traffic to ${env.IDLE_ENV}"
                    
                    try {
                        // Switch 100% traffic to the idle environment
                        sh """
                        aws elbv2 modify-listener --listener-arn ${env.LISTENER_ARN} --default-actions Type=forward,TargetGroupArn=${env.IDLE_TG_ARN}
                        """
                        
                        echo "‚úÖ Traffic switched 100% to ${env.IDLE_ENV}"
                        
                        // Remove the test rule if it exists
                        sh """
                        TEST_RULE=\$(aws elbv2 describe-rules --listener-arn ${env.LISTENER_ARN} --query "Rules[?Priority=='10'].RuleArn" --output text)
                        
                        if [ ! -z "\$TEST_RULE" ]; then
                            aws elbv2 delete-rule --rule-arn \$TEST_RULE
                        fi
                        """
                        
                        // Verify the traffic distribution
                        def currentConfig = sh(
                            script: """
                            aws elbv2 describe-listeners --listener-arns ${env.LISTENER_ARN} --query 'Listeners[0].DefaultActions[0]' --output json
                            """,
                            returnStdout: true
                        ).trim()
                        
                        echo "Current listener configuration: ${currentConfig}"
                        echo "‚úÖ‚úÖ‚úÖ Traffic switching completed successfully!"
                    } catch (Exception e) {
                        error "Failed to switch traffic: ${e.message}"
                    }
                }
            }
        }

        stage('Scale Down Old Environment') {
            when {
                expression { env.DEPLOY_NEW_VERSION == 'true' }
            }
            steps {
                script {
                    echo "Scaling down old ${env.LIVE_ENV} environment..."
                    
                    try {
                        // Scale down the previous live service
                        sh """
                        aws ecs update-service --cluster ${env.ECS_CLUSTER} --service ${env.LIVE_SERVICE} --desired-count 0
                        """
                        
                        echo "‚úÖ Previous live service (${env.LIVE_ENV}) scaled down"
                        
                        // Wait for the service to stabilize
                        sh """
                        aws ecs wait services-stable --cluster ${env.ECS_CLUSTER} --services ${env.LIVE_SERVICE}
                        """
                        
                        echo "‚úÖ All services are stable"
                    } catch (Exception e) {
                        echo "Warning: Scale down encountered an issue: ${e.message}"
                        echo "Continuing despite scale down issues"
                    }
                }
            }
        }
    }
}
