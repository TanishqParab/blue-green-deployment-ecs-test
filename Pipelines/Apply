pipeline {
    agent any
    
    environment {
        AWS_REGION = "us-east-1"
        AWS_CREDENTIALS_ID = "aws-credentials"
        TF_WORKING_DIR = "/var/lib/jenkins/workspace/blue-green-deployment-job-ecs-test-apply/blue-green-deployment"
        APP_FILE = "app.py"
        DOCKERFILE = "Dockerfile" 
        ECR_REPO_NAME = "blue-green-app" 
    }
    
    parameters {
        choice(name: 'MANUAL_BUILD', choices: ['YES', 'DESTROY', 'NO'], description: 'YES: Run Terraform, DESTROY: Destroy Infra, NO: Auto Deploy App Changes')
    }

    triggers {
        githubPush()  // ‚úÖ Trigger pipeline on git push
    }

    stages {
        stage('Initialize') {
            steps {
                script {
                    def buildId = currentBuild.number
                    echo "Current Build ID: ${buildId}"
                }
            }
        }
        
        stage('Set Execution Type') {
            steps {
                script {
                    // Default Execution Type
                    env.EXECUTION_TYPE = 'SKIP'

                    // 1Ô∏è‚É£ Handle Destroy First (Highest Priority)
                    if (params.MANUAL_BUILD == 'DESTROY') {
                        echo "‚ùå Destroy requested. Running destroy stage only."
                        env.EXECUTION_TYPE = 'DESTROY'
                    } 
                    // 2Ô∏è‚É£ Manual Apply Trigger
                    else if (params.MANUAL_BUILD == 'YES') {
                        echo "üõ†Ô∏è Manual build requested. Running Terraform regardless of changes."
                        env.EXECUTION_TYPE = 'MANUAL_APPLY'
                    }

                    echo "Final Execution Type: ${env.EXECUTION_TYPE}"
                }
            }
        }
        
        stage('Checkout') {
            when {
                expression { env.EXECUTION_TYPE != 'ROLLBACK' }
            }
            steps {
                script {
                    echo "Checking out the latest code..."
                    checkout scmGit(branches: [[name: 'main']], extensions: [], userRemoteConfigs: [[url: 'https://github.com/TanishqParab/blue-green-deployment-ecs-test']])
                }
            }
        }

        stage('Convert Line Endings') {
            when {
                expression { env.EXECUTION_TYPE == 'FULL_DEPLOY' || env.EXECUTION_TYPE == 'MANUAL_APPLY' }
            }
            steps {
                sh '''
                # Convert all .tf files
                find . -name "*.tf" -type f -exec dos2unix {} \\;
                
                # Convert app.py and Dockerfile
                dos2unix ${TF_WORKING_DIR}/modules/ecs/scripts/${APP_FILE}
                dos2unix ${TF_WORKING_DIR}/modules/ecs/scripts/${DOCKERFILE}
                '''
            }
        }

        stage('Terraform Init') {
            when {
                expression { env.EXECUTION_TYPE == 'FULL_DEPLOY' || env.EXECUTION_TYPE == 'MANUAL_APPLY' }
            }
            steps {
                script {
                    echo "Initializing Terraform..."
                    dir("${TF_WORKING_DIR}") {
                        sh "terraform init"
                    }
                }
            }
        }

        stage('Terraform Plan') {
            when {
                expression { env.EXECUTION_TYPE == 'FULL_DEPLOY' || env.EXECUTION_TYPE == 'MANUAL_APPLY' }
            }
            steps {
                script {
                    def tgExist = true
                    def blueTG = ""
                    def greenTG = ""

                    try {
                        blueTG = sh(
                            script: "aws elbv2 describe-target-groups --names blue-tg --query 'TargetGroups[0].TargetGroupArn' --region ${env.AWS_REGION} --output text",
                            returnStdout: true
                        ).trim()
                        greenTG = sh(
                            script: "aws elbv2 describe-target-groups --names green-tg --query 'TargetGroups[0].TargetGroupArn' --region ${env.AWS_REGION} --output text",
                            returnStdout: true
                        ).trim()
                    } catch (Exception e) {
                        echo "‚ö†Ô∏è Could not fetch TG ARNs. Assuming first build. Skipping TG vars in plan."
                        tgExist = false
                    }

                    def planCommand = "terraform plan"
                    if (tgExist) {
                        planCommand += " -var='blue_target_group_arn=${blueTG}' -var='green_target_group_arn=${greenTG}'"
                    }
                    planCommand += " -out=tfplan"

                    echo "Running Terraform Plan: ${planCommand}"
                    dir("${TF_WORKING_DIR}") {
                        sh "${planCommand}"
                        archiveArtifacts artifacts: 'tfplan', onlyIfSuccessful: true
                    }
                }
            }
        }

        stage('Manual Approval') {
            when {
                expression { env.EXECUTION_TYPE == 'FULL_DEPLOY' || env.EXECUTION_TYPE == 'MANUAL_APPLY' }
            }
            steps {
                script {
                    dir("${env.TF_WORKING_DIR}") {
                        // Generate and save the full Terraform plan to a file
                        sh 'terraform plan -no-color > tfplan.txt'
        
                        // Read the full plan for logging purposes
                        def tfPlan = readFile('tfplan.txt')
        
                        // Archive the plan as an artifact for download
                        archiveArtifacts artifacts: 'tfplan.txt', fingerprint: true
        
                        // Log plan to console for visibility
                        echo "========== Terraform Plan Start =========="
                        echo tfPlan
                        echo "========== Terraform Plan End ============"
        
                        // Construct artifact download link
                        def planDownloadLink = "${env.BUILD_URL}artifact/tfplan.txt"
        
                        // Email for approval with download link
                        emailext (
                            to: 'tanishqparab2001@gmail.com',
                            subject: "Approval required for Terraform apply - Build ${currentBuild.number}",
                            body: """
                                Hi Tanishq,
        
                                A Terraform apply requires your approval.
        
                                üëâ Review the Terraform plan here (download full plan):
                                ${planDownloadLink}
        
                                Once reviewed, please approve or abort the deployment at:
                                ${env.BUILD_URL}input
        
                                Regards,  
                                Jenkins Automation
                            """,
                            replyTo: 'tanishqparab2001@gmail.com'
                        )
        
                        // Input prompt for manual approval
                        timeout(time: 1, unit: 'HOURS') {
                            input(
                                id: 'ApplyApproval',
                                message: "Terraform Apply Approval Required",
                                ok: "Apply",
                                parameters: [],
                                description: """‚ö†Ô∏è Full plan is too long for this screen.
        
        ‚úÖ Check the full plan in:
        - [tfplan.txt Artifact](${planDownloadLink})
        - Console Output (above this stage)"""
                            )
                        }
                    }
                }
            }
        }

        stage('Apply Infrastructure') {
            when {
                expression { env.EXECUTION_TYPE == 'FULL_DEPLOY' || env.EXECUTION_TYPE == 'MANUAL_APPLY' }
            }
            steps {
                script {
                    echo "Running Terraform apply"
                    dir("${TF_WORKING_DIR}") {
                        sh "terraform apply -auto-approve tfplan"
                        
                        // üëá Add this line to save the state file
                        archiveArtifacts artifacts: 'terraform.tfstate', fingerprint: true 
                    }
                    
                    echo "Waiting for ECS services to stabilize..."
                    sleep(60)  // Give time for services to start
                    
                    // Get the cluster name
                    def cluster = sh(
                        script: "terraform -chdir=${TF_WORKING_DIR} output -raw ecs_cluster_id",
                        returnStdout: true
                    ).trim()
                    
                    // Check ECS service status
                    sh """
                    aws ecs describe-services --cluster ${cluster} --services blue-service --query 'services[0].{Status:status,DesiredCount:desiredCount,RunningCount:runningCount}' --output table
                    """
                    
                    // Get the ALB DNS name
                    def albDns = sh(
                        script: "terraform -chdir=${TF_WORKING_DIR} output -raw alb_dns_name",
                        returnStdout: true
                    ).trim()
                    
                    echo "Application is accessible at: http://${albDns}"
                    
                    // Test the application
                    sh """
                    # Wait for the application to be fully available
                    sleep 30
                    
                    # Test the health endpoint
                    curl -f http://${albDns}/health || echo "Health check failed but continuing"
                    """
                }
            }
        }

        stage('Manual Approval for Destroy') {
            when {
                expression { params.MANUAL_BUILD == 'DESTROY' }
            }
            steps {
                script {
                    // Final approval URL (no inputId needed in URL)
                    def destroyLink = "${env.BUILD_URL}input"
        
                    emailext (
                        to: 'tanishqparab2001@gmail.com',
                        subject: "üö® Approval Required for Terraform Destroy - Build ${currentBuild.number}",
                        body: """
                        WARNING: You are about to destroy AWS infrastructure.
        
                        üëâ Click the link below to approve destruction:
        
                        ${destroyLink}
                        """,
                        replyTo: 'tanishqparab2001@gmail.com'
                    )
        
                    timeout(time: 1, unit: 'HOURS') {
                        input message: '‚ö†Ô∏è Confirm destruction of infrastructure?', ok: 'Destroy Now'
                    }
                }
            }
        }
        
        
        stage('Clean ECR Repository') {
            when {
                expression { params.MANUAL_BUILD == 'DESTROY' }
            }
            steps {
                script {
                    echo "üßπ Cleaning up ECR repository before destruction..."
                    
                    try {
                        // Check if the ECR repository exists
                        def ecrRepoExists = sh(
                            script: "aws ecr describe-repositories --repository-names ${env.ECR_REPO_NAME} --region ${env.AWS_REGION} &>/dev/null && echo 0 || echo 1",
                            returnStdout: true
                        ).trim() == "0"
            
                        if (ecrRepoExists) {
                            echo "üîç Fetching all images in repository ${env.ECR_REPO_NAME}..."
                            
                            // Get all image digests (including untagged images)
                            def imageDigests = sh(
                                script: """
                                    aws ecr list-images --repository-name ${env.ECR_REPO_NAME} --region ${env.AWS_REGION} \
                                    --query 'imageIds[?imageDigest].imageDigest' --output text
                                """,
                                returnStdout: true
                            ).trim()
                            
                            // Get all image tags
                            def imageTags = sh(
                                script: """
                                    aws ecr list-images --repository-name ${env.ECR_REPO_NAME} --region ${env.AWS_REGION} \
                                    --query 'imageIds[?imageTag].imageTag' --output text
                                """,
                                returnStdout: true
                            ).trim()
                            
                            // Combine all images to delete (both digests and tags)
                            def imagesToDelete = []
                            
                            if (imageDigests) {
                                imagesToDelete.addAll(imageDigests.split('\\s+').collect { "imageDigest=${it}" })
                            }
                            
                            if (imageTags) {
                                imagesToDelete.addAll(imageTags.split('\\s+').collect { "imageTag=${it}" })
                            }
                            
                            if (imagesToDelete) {
                                echo "üóëÔ∏è Found ${imagesToDelete.size()} images to delete"
                                
                                // Batch delete in chunks of 100 (AWS limit per request)
                                imagesToDelete.collate(100).each { batch ->
                                    def batchString = batch.join(' ')
                                    echo "üöÆ Deleting batch of ${batch.size()} images..."
                                    sh """
                                        aws ecr batch-delete-image \
                                            --repository-name ${env.ECR_REPO_NAME} \
                                            --region ${env.AWS_REGION} \
                                            --image-ids ${batchString}
                                    """
                                    echo "‚úÖ Deleted batch of ${batch.size()} images"
                                }
                                
                                echo "‚úÖ Successfully deleted all images from repository"
                            } else {
                                echo "‚ÑπÔ∏è No images found in repository"
                            }
                            
                            // Optional: Delete the repository itself if desired
                            // echo "üóëÔ∏è Deleting ECR repository..."
                            // sh """
                            //     aws ecr delete-repository \
                            //         --repository-name ${env.ECR_REPO_NAME} \
                            //         --region ${env.AWS_REGION} \
                            //         --force
                            // """
                            // echo "‚úÖ ECR repository deleted"
                        } else {
                            echo "‚ÑπÔ∏è ECR repository ${env.ECR_REPO_NAME} not found, skipping cleanup"
                        }
                    } catch (Exception e) {
                        error "Failed to clean ECR repository: ${e.message}"
                    }
                }
            }
        }
        
        
        stage('Destroy Infrastructure') {
            when {
                expression { params.MANUAL_BUILD == 'DESTROY' }
            }
            steps {
                script {
                    // 1Ô∏è‚É£ Get the build number containing the state
                    def buildNumber = input(
                        message: "Enter the build number that created the infrastructure (e.g., 42)",
                        parameters: [string(name: 'BUILD_NUMBER')]
                    )
        
                    // 2Ô∏è‚É£ Fetch the archived state file
                    dir("${TF_WORKING_DIR}") {
                        copyArtifacts(
                            projectName: env.JOB_NAME,
                            selector: specific("${buildNumber}"),
                            filter: "terraform.tfstate",
                            target: "."
                        )
                    }
        
                    // 3Ô∏è‚É£ Initialize and destroy
                    dir("${TF_WORKING_DIR}") {
                        sh "terraform init"
                        sh "terraform destroy -auto-approve"
                    }
                }
            }
        }
    }
}
