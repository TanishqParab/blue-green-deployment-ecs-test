pipeline {
    agent any
    
    environment {
        AWS_REGION = "us-east-1"
        AWS_CREDENTIALS_ID = "aws-credentials"
        TF_WORKING_DIR = "/var/lib/jenkins/workspace/blue-green-deployment-job/blue-green-deployment"
        APP_FILE = "app.py"
        SSH_KEY_ID = "blue-green-key"
        PRIVATE_KEY = credentials('blue-green-key')  // Fetch SSH private key from Jenkins credentials
    }


    stages {
        stage('checkout') {
            steps {
                checkout scmGit(branches: [[name: 'main']], extensions: [], userRemoteConfigs: [[url: 'https://github.com/TanishqParab/blue-green-deployment']])
            }
        }
        
        stage('Initialize Terraform') {
            steps {
                script {
                    echo "Initializing Terraform in ${TF_WORKING_DIR}"
                    dir("${TF_WORKING_DIR}") {
                        sh 'terraform init'
                    }
                }
            }
        }
        
        stage('Plan Infrastructure') {
            steps {
                script {
                    echo "Running Terraform plan"
                    dir("${TF_WORKING_DIR}") {
                        withCredentials([sshUserPrivateKey(credentialsId: 'blue-green-key', keyFileVariable: 'SSH_KEY')]) {
                            sh """
                            export TF_VAR_private_key_path=$SSH_KEY
                            terraform plan -out=tfplan
                            """
                        }
                    }
                }
            }
        }
        
        stage('Apply Infrastructure & Deploy App') {
            steps {
                script {
                    echo "Applying Terraform plan and deploying app"
                    dir("${TF_WORKING_DIR}") {
                        sh 'terraform apply -auto-approve'
                    }

                    echo "Waiting for instances to start..."
                    sleep(60)  // Give time for instances to fully boot

                    echo "Checking instance states..."
                    sh """
                    aws ec2 describe-instances \
                    --filters "Name=tag:Environment,Values=Blue-Green" \
                    --query 'Reservations[*].Instances[*].[InstanceId, State.Name]' \
                    --output table
                    """

                    echo "Retrieving instance IPs..."
                    def instances = sh(
                        script: """
                        aws ec2 describe-instances \
                        --filters "Name=tag:Environment,Values=Blue-Green" "Name=instance-state-name,Values=running" \
                        --query 'Reservations[*].Instances[*].PublicIpAddress' \
                        --output text
                        """,
                        returnStdout: true
                    ).trim()

                    if (!instances) {
                        error "No running instances found! Check AWS console and tagging."
                    }

                    def instanceList = instances.split("\n")

                    instanceList.each { instance ->
                        echo "Deploying to instance: ${instance}"
                        sshagent([SSH_KEY_ID]) {
                            sh """
                            echo "Copying app.py and setup script to ${instance}..."
                            scp -o StrictHostKeyChecking=no ${TF_WORKING_DIR}/modules/ec2/scripts/app.py ec2-user@${instance}:/home/ec2-user/app.py
                            scp -o StrictHostKeyChecking=no ${TF_WORKING_DIR}/modules/ec2/scripts/setup_flask_service.py ec2-user@${instance}:/home/ec2-user/setup_flask_service.py

                            echo "Running setup script on ${instance}..."
                            ssh ec2-user@${instance} 'chmod +x /home/ec2-user/setup_flask_service.py && sudo python3 /home/ec2-user/setup_flask_service.py'
                            """
                        }
                    }
                }
            }
        }
        
        stage('Retrieve Target Group ARNs') {
            steps {
                script {
                    echo "Fetching Target Group ARNs..."

                    def blue_tg_arn = sh(
                        script: """aws elbv2 describe-target-groups \
                        --names "blue-tg" \
                        --query 'TargetGroups[0].TargetGroupArn' --output text""",
                        returnStdout: true
                    ).trim()

                    def green_tg_arn = sh(
                        script: """aws elbv2 describe-target-groups \
                        --names "green-tg" \
                        --query 'TargetGroups[0].TargetGroupArn' --output text""",
                        returnStdout: true
                    ).trim()

                    if (!blue_tg_arn || !green_tg_arn) {
                        error "Failed to retrieve Target Group ARNs. Check AWS target groups."
                    }

                    echo "Blue Target Group ARN: ${blue_tg_arn}"
                    echo "Green Target Group ARN: ${green_tg_arn}"

                    env.BLUE_TG_ARN = blue_tg_arn
                    env.GREEN_TG_ARN = green_tg_arn
                }
            }
        }
        
        stage('Switch Traffic to Green') {
            steps {
                script {
                    echo "Retrieving Green Instance ID..."
                    def green_instance = sh(
                        script: """
                        aws ec2 describe-instances \
                        --filters "Name=tag:Name,Values=Green-Instance" "Name=tag:Environment,Values=Blue-Green" "Name=instance-state-name,Values=running" \
                        --query "Reservations[*].Instances[*].InstanceId" --output text
                        """,
                        returnStdout: true
                    ).trim()
                    
                    // Debugging: Print Green Instance ID
                    echo "Fetched Green Instance ID: '${green_instance}'"
                    
                    // Check if green_instance is empty
                    if (!green_instance || green_instance == "null") {
                        error "No running Green instances found! Verify AWS Console."
                    }
                    env.GREEN_INSTANCE = green_instance
                    
                    echo "Waiting for Green instance to be fully running..."
                    sh "aws ec2 wait instance-running --instance-ids ${env.GREEN_INSTANCE} --no-cli-pager"

                    echo "Registering Green instance (${env.GREEN_INSTANCE}) to Green Target Group..."
                    sh """
                    aws elbv2 register-targets \
                    --target-group-arn "${env.GREEN_TG_ARN}" \
                    --targets Id="${env.GREEN_INSTANCE}" \
                    --region "${env.AWS_REGION}"
                    """

                    sleep(30)
                }
            }
        }
        
        stage('Stop Blue Instances') {
            steps {
                script {
                    echo "Fetching Running Blue Instances..."
                    def blue_instances = sh(
                        script: """
                        aws ec2 describe-instances \
                        --filters "Name=tag:Name,Values=Blue-Instance" "Name=instance-state-name,Values=running" \
                        --query "Reservations[*].Instances[*].InstanceId" --output text
                        """,
                        returnStdout: true
                    ).trim()

                    if (!blue_instances) {
                        echo "No running Blue instances found."
                    } else {
                        blue_instances.split().each { instance_id ->
                            echo "Stopping Blue instance: ${instance_id}..."
                            sh "aws ec2 stop-instances --instance-ids ${instance_id} --region ${env.AWS_REGION}"
                            sleep(15) // Wait 15 seconds for the instance to stop
                            echo "Blue instance ${instance_id} successfully stopped."
                        }
                    }
                }
            }
        }
        
        
        stage('Wait Before Destroy') {
            steps {
                script {
                    echo "Waiting for 15 minutes before destroying infrastructure..."
                    sh "sleep 900"
                }
            }
        }

        stage('Destroy Infrastructure') {
            steps {
                script {
                    echo "Destroying ALL Infrastructure (Blue & Green)..."
                    dir("${TF_WORKING_DIR}") {
                        sh 'terraform destroy -auto-approve'
                    }
                }
            }
        }
    }

    post {
        always {
            echo "Destroy Completed!"
        }
    }
}
